[tool.poetry]
name = "auth-microservice"
version = "0.1.0"
description = "Service d'authentification et de gestion d'utilisateurs"
authors = ["Flavien HUGS <flavienhugs@pm.me>"]
packages = [{include = "src" }]

[tool.poetry.dependencies]
python = "3.12.3"
beanie = "1.26.0"
python-slugify = "8.0.4"
fastapi-jwt = "0.3.0"
pyotp = "2.9.0"
httptools = "0.6.4"
uvloop = "0.21.0"
fastapi-cache2 = {version = "0.2.2", extras = ["redis"]}
fastapi = {version = "0.115.6", extras = ["standard"]}
fastapi-pagination = "0.12.34"
pydantic-settings = "2.8.1"
pwdlib = {version = "0.2.1", extras = ["argon2", "bcrypt"]}
user-agents = "2.2.0"
cachetools = "5.5.2"
python-jose = "3.4.0"
getmac = "0.9.5"
python-semantic-release = "^9.21.1"


[tool.poetry.group.test.dependencies]
pytest = "7.3.1"
coverage = "7.6.12"
pytest-mock = "3.14.0"
pytest-asyncio = "0.21.2"
mongomock-motor = "0.0.31"
faker = "30.10.0"
setuptools = "72.1.0"
pytest-cov = "4.1.0"
pytest-dotenv = "0.5.2"
fakeredis = "2.24.1"
httpx = "0.27.2"


[tool.poetry.group.dev.dependencies]
pre-commit = "3.8.0"
ipython = "8.26.0"
black = "25.1.0"
bandit = "1.8.3"
safety = "3.2.5"
flake8 = "7.2.0"
flake8-pyproject = "1.2.3"


[tool.poetry.scripts]
app = 'src.cli:app'
auth-cli = 'src.shared.cli:app'

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.flake8]
max-line-length = 128
exclude = [
  ".git",
  "src/common",
  "__pycache__"
]


[tool.black]
line-length = 128
include = '\.pyi?$'
exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | \.docker
    | \*.egg-info
    | _build
    | buck-out
    | build
    | dist
    | src/common
  )/
)
'''

[tool.pytest.ini_options]
env_files = 'tests/.test.env'
env_override_existing_values = 1
capture = "no"
log-cli-level = "INFO"
python_files = "test_*.py"
asyncio_mode = "auto"
filterwarnings = [
  "ignore",
  "ignore:.*U.*mode is deprecated:DeprecationWarning"
]

[tool.semantic_release]
assets = []
build_command_env = []
commit_message = "{version}\n\nAutomatically generated by python-semantic-release"
commit_parser = "conventional"
logging_use_named_masks = false
major_on_zero = true
allow_zero_version = true
no_git_verify = false
tag_format = "v{version}"
version_variable = "src/__init__.py:__version__"

[tool.semantic_release.branches.main]
match = "(main|master|develop)"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.changelog]
template_dir = "templates"
changelog_file = "CHANGELOG.md"
exclude_commit_patterns = []

[tool.semantic_release.changelog.environment]
block_start_string = "{%"
block_end_string = "%}"
variable_start_string = "{{"
variable_end_string = "}}"
comment_start_string = "{#"
comment_end_string = "#}"
trim_blocks = false
lstrip_blocks = false
newline_sequence = "\n"
keep_trailing_newline = false
extensions = []
autoescape = true

[tool.semantic_release.commit_author]
env = "GIT_COMMIT_AUTHOR"
default = "semantic-release <semantic-release>"

[tool.semantic_release.commit_parser_options]
allowed_tags = ["feat", "fix", "perf", "build", "chore", "ci", "docs", "style", "refactor", "test"]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]
default_bump_level = 0

[tool.semantic_release.remote]
name = "origin"
type = "github"
ignore_token_for_push = false
insecure = false

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true
