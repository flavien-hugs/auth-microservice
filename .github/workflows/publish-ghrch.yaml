name: Docker Image CI for GHRC

on:
  push:
    branches:
      - "main"
      - "preprod"
      - "develop"
  pull_request:
    branches:
      - "main"
      - "develop"
      - "preprod"

jobs:
    code-quality:
        strategy:
          fail-fast: false
          matrix:
            python-version:
              - "3.12.3"
            os: [ ubuntu-latest ]
        runs-on: ${{ matrix.os }}
        environment:
            name: code-quality
        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v3
              with:
                python-version: ${{ matrix.python-version }}
                architecture: 'x64'

            - name: Install pipx, Poetry and Upgrade pip/setuptools
              run: |
                  python --version
                  python -m pip install pipx
                  python -m pipx ensurepath
                  python -m pipx install poetry
                  export PATH=$PATH:/root/.local/bin
                  poetry env use python
                  poetry run pip install --upgrade pip setuptools
                  poetry add black flake8 bandit

            - name: Run black
              run: poetry run black . --check

            - name: Run flake8
              run: poetry run flake8 .

            - name: Run bandit
              run: poetry run bandit .

    tests:
        needs: [code-quality]
        strategy:
          fail-fast: false
          max-parallel: 4
          matrix:
            python-version:
              - "3.12.3"
            os: [ubuntu-latest]
        runs-on: ${{ matrix.os }}
        environment:
          name: tests
        steps:
            - name: Checkout code
              uses: actions/checkout@v3
              with:
                submodules: recursive
                token: ${{ secrets.GH_SUBMODULE_TOKEN }}
                fetch-depth: 0

            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v3
              with:
                python-version: ${{ matrix.python-version }}
                architecture: 'x64'

            - name: Install pipx, Poetry and Upgrade pip/setuptools
              run: |
                python --version
                python -m pip install pipx
                python -m pipx ensurepath
                python -m pipx install poetry
                export PATH=$PATH:/root/.local/bin
                poetry env use python
                poetry run pip install --upgrade pip setuptools
                poetry install --no-root

            - name: Run Tests
              run: |
                echo "Starting tests ..."
                poetry run pytest --cov --cov-report term --cov-report xml:coverage.xml tests

            - name: Upload coverage report
              uses: actions/upload-artifact@v4
              with:
                name: coverage
                path: coverage.xml

    bump-version:
        needs: [tests]
        runs-on: ubuntu-latest
        permissions:
            actions: write
            contents: write
        outputs:
            new_version: ${{ steps.extract-version.outputs.version }}
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Bump version using semantic-release
              id: semantic-release
              uses: python-semantic-release/python-semantic-release@master
              with:
                  github_token: ${{ secrets.GH_SUBMODULE_TOKEN }}
                  
            - name: Extract new verion
              id: extract-version
              run: |
                echo "Get the latest tag created by semantic-release ..."
                VERSION=$(git describe --tags --abbrev=0)
                echo "Extracted version: $VERSION"
                echo "version=$VERSION" >> $GITHUB_OUTPUT
    
    staging:
        needs: [bump-version, tests]
        runs-on: ubuntu-latest
        environment:
            name: ${{ (github.ref == 'refs/heads/main' && 'latest') || (github.ref == 'refs/heads/preprod' && 'preprod') || 'dev' }}
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  submodules: true
                  token: ${{ secrets.GH_SUBMODULE_TOKEN }}

            - name: Login to Docker registry
              run: |
                echo "Logging into Docker registry..."
                echo "${{ secrets.GHRC_PASSWORD }}" | \
                    docker login ghcr.io -u ${{ secrets.GHRC_USERNAME }} --password-stdin
                echo "Logging into Docker registry success"

            - name: Determine image tag and build
              id: build
              run: |
                echo "Get version from bump-version job ..."
                VERSION="${{ needs.bump-version.outputs.new_version }}"
                
                echo "Clean ‘v’ prefix if present"
                CLEAN_VERSION=${VERSION#v}
                echo "Using version: $CLEAN_VERSION"
                
                if [[ -z "$VERSION" ]]; then
                  echo "Error: No version detected from semantic-release"
                  exit 1
                fi

                BRANCH_NAME=""
                if [[ "${{ github.event_name }}" == "push" ]]; then
                  BRANCH_NAME="${{ github.ref_name }}"
                elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
                  BRANCH_NAME="${{ github.base_ref }}"
                else
                  echo "Unsupported event: ${{ github.event_name }}"
                  exit 1
                fi

                echo "Branch name: $BRANCH_NAME"
                
                # Builds tags according to branch and version
                if [[ "$BRANCH_NAME" == "main" || "$BRANCH_NAME" == "master" ]]; then
                  DOCKER_TAGS=("latest" "$CLEAN_VERSION")
                elif [[ "$BRANCH_NAME" == "preprod" ]]; then
                  DOCKER_TAGS=("preprod" "${CLEAN_VERSION}-preprod")
                elif [[ "$BRANCH_NAME" == "develop" ]]; then
                  DOCKER_TAGS=("dev" "${CLEAN_VERSION}-dev")
                else
                  echo "No valid tag found for branch $BRANCH_NAME, exiting..."
                  exit 1
                fi
                
                # Build and push with all tags
                echo "Building Docker image with tags: ${DOCKER_TAGS[@]}"
                docker build -t ${{ secrets.GHRC_REGISTRY_ADDR }}:${DOCKER_TAGS[0]} .
                
                # Add additional tags
                for tag in "${DOCKER_TAGS[@]:1}"; do
                  echo "Adding additional tag: $tag"
                  docker tag ${{ secrets.GHRC_REGISTRY_ADDR }}:${DOCKER_TAGS[0]} ${{ secrets.GHRC_REGISTRY_ADDR }}:$tag
                done
            
                # Push all tags
                for tag in "${DOCKER_TAGS[@]}"; do
                  docker push ${{ secrets.GHRC_REGISTRY_ADDR }}:$tag
                done
                
                echo "Build and push completed successfully"
